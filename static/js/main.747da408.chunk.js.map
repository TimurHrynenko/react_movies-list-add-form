{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/Input/Input.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","Input","field","changeValue","setError","errors","name","value","htmlFor","type","id","placeholder","onChange","event","onBlur","target","NewMovie","state","newMovie","requiredFields","submitDisable","isUrlValid","test","setErrorStatusTrue","setState","changeValueHandler","submitHandler","preventDefault","Object","entries","forEach","fieldName","fieldValue","values","some","err","props","addMovie","this","onSubmit","disabled","Component","App","moviesFromServer","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.747da408.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Input.scss';\n\nexport const Input = ({ field, changeValue, setError, errors }) => {\n  const [name, value] = field;\n  let title;\n\n  switch (name) {\n    case 'imgUrl':\n      title = 'Film image URL';\n      break;\n\n    case 'imdbUrl':\n      title = 'Film IMDB URL';\n      break;\n\n    case 'imdbId':\n      title = 'Film IMDB id';\n      break;\n\n    default:\n      title = name;\n      break;\n  }\n\n  return (\n    <label htmlFor={name} className=\"Input\">\n      {title}\n      <input\n        type=\"text\"\n        className={\n          errors[name]\n            ? 'Input__field Input__field_err'\n            : 'Input__field'\n        }\n        name={name}\n        id={name}\n        placeholder={name}\n        value={value}\n        onChange={event => changeValue(event)}\n        onBlur={event => setError(event.target)}\n      />\n      {errors[name] && (\n        <div\n          className=\"Input__error\"\n        >\n          {\n            (name === 'imgUrl'\n            || name === 'imdbUrl')\n              ? 'This url isn`t urlish enough'\n              : 'Please, fill this field, kind sir'\n          }\n        </div>\n      )}\n    </label>\n  );\n};\n\nInput.propTypes = {\n  field: PropTypes.arrayOf(PropTypes.string).isRequired,\n  changeValue: PropTypes.func.isRequired,\n  setError: PropTypes.func.isRequired,\n  errors: PropTypes.shape({\n    name: PropTypes.bool,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from '../Input';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    newMovie: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    },\n\n    errors: {\n      title: false,\n      description: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    },\n\n    requiredFields: {\n      title: true,\n      description: false,\n      imgUrl: true,\n      imdbUrl: true,\n      imdbId: true,\n    },\n\n    submitDisable: false,\n  };\n\n  isUrlValid = ({ value }) => {\n    // eslint-disable-next-line\n    const urlCheckerRegExp = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    return urlCheckerRegExp.test(value);\n  }\n\n  setErrorStatusTrue = ({ name, value }) => {\n    if (!this.state.requiredFields[name]) {\n      return;\n    }\n\n    if (!this.state.newMovie[name]) {\n      this.setState(state => ({\n        ...state,\n\n        errors: {\n          ...state.errors,\n          [name]: true,\n        },\n      }));\n    }\n\n    if (name === 'imgUrl'\n      || name === 'imdbUrl') {\n      if (!this.isUrlValid(value)) {\n        this.setState(state => ({\n          ...state,\n\n          errors: {\n            ...state.errors,\n            [name]: true,\n          },\n        }));\n      }\n    }\n  }\n\n  changeValueHandler = ({ target }) => {\n    this.setState(state => ({\n      ...state,\n\n      newMovie: {\n        ...state.newMovie,\n        [target.name]: target.value,\n      },\n\n      errors: (target.name === 'description')\n        ? { ...state.errors }\n        : {\n          ...state.errors,\n          [target.name]: false,\n        },\n\n      submitDisable: false,\n    }));\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    const { newMovie, errors } = this.state;\n\n    Object.entries(newMovie)\n      .forEach(([fieldName, fieldValue]) => {\n        if (fieldValue === '') {\n          this.setErrorStatusTrue({\n            name: fieldName,\n            value: fieldValue,\n          });\n        }\n      });\n\n    if (!newMovie.title\n    || !newMovie.imgUrl\n    || !newMovie.imdbUrl\n    || !newMovie.imdbId\n    || Object.values(errors).some(err => err)) {\n      this.setState(state => ({\n        ...state,\n        submitDisable: true,\n      }));\n\n      return;\n    }\n\n    this.props.addMovie(newMovie);\n\n    this.setState({\n      newMovie: {\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      },\n      errors: {\n        title: false,\n        description: false,\n        imgUrl: false,\n        imdbUrl: false,\n        imdbId: false,\n      },\n      submitDisable: false,\n    });\n  }\n\n  render() {\n    const { newMovie, errors, submitDisable } = this.state;\n\n    return (\n      <form\n        className=\"NewMovie\"\n        onSubmit={event => this.submitHandler(event)}\n      >\n        {Object.entries(newMovie).map(field => (\n          <Input\n            key={field[0]}\n            field={field}\n            changeValue={this.changeValueHandler}\n            setError={this.setErrorStatusTrue}\n            errors={errors}\n          />\n        ))}\n\n        <button\n          className=\"NewMovie__addBtn\"\n          type=\"submit\"\n          disabled={submitDisable}\n        >\n          Add movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: state.movies.concat(movie),\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}